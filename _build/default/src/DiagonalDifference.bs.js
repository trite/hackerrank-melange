// Generated by Melange

import * as Curry from "melange/lib/es6/curry.js";
import * as Stdlib from "melange/lib/es6/stdlib.js";
import * as Js_list from "melange/lib/es6/js_list.js";
import * as Trelude from "./utils/Trelude.bs.js";
import * as Readline from "./utils/Readline.bs.js";
import * as Caml_array from "melange/lib/es6/caml_array.js";
import * as Caml_format from "melange/lib/es6/caml_format.js";
import * as Caml_option from "melange/lib/es6/caml_option.js";

function diag1(matrix) {
  return Trelude.sum(Trelude.rangeArr(0, matrix.length).map(function (x) {
                  return Caml_array.get(Caml_array.get(matrix, x), x);
                }));
}

function diag2(matrix) {
  var len = matrix.length;
  return Trelude.sum(Trelude.rangeArr(0, len).map(function (x) {
                  return Caml_array.get(Caml_array.get(matrix, (len - x | 0) - 1 | 0), x);
                }));
}

function diagonalDifference(matrix) {
  var d1 = diag1(matrix);
  var d2 = diag2(matrix);
  return Stdlib.abs(d1 - d2 | 0);
}

function parse(param) {
  return param.map(function (param) {
              return Trelude.$great$great((function (param) {
                            return param.split(" ");
                          }), (function (param) {
                            return param.map(Caml_format.caml_int_of_string);
                          }), param);
            });
}

function doWork(param) {
  return Trelude.$great$great(parse, diagonalDifference, param);
}

function mapOrLog(msg, f, opt) {
  if (opt !== undefined) {
    return Curry._1(f, Caml_option.valFromOption(opt));
  } else {
    console.log(msg);
    return ;
  }
}

Readline.withAll(function (arr) {
      mapOrLog("Oops!", (function (param) {
              console.log(Trelude.$great$great(parse, diagonalDifference, Js_list.toVector(param[1])));
            }), Trelude.List.pop(arr));
    });

var $great$great = Trelude.$great$great;

export {
  $great$great ,
  diag1 ,
  diag2 ,
  diagonalDifference ,
  parse ,
  doWork ,
  mapOrLog ,
}
/*  Not a pure module */
