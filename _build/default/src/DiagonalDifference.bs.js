// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Stdlib = require("bs-platform/lib/js/stdlib.js");
var Trelude = require("./utils/Trelude.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function $great$great(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function diag1(matrix) {
  return Trelude.sum(Trelude.rangeArr(0, matrix.length).map(function (x) {
                  return Caml_array.get(Caml_array.get(matrix, x), x);
                }));
}

function diag2(matrix) {
  var len = matrix.length;
  return Trelude.sum(Trelude.rangeArr(0, len).map(function (x) {
                  return Caml_array.get(Caml_array.get(matrix, (len - x | 0) - 1 | 0), x);
                }));
}

function diagonalDifference(matrix) {
  var d1 = diag1(matrix);
  var d2 = diag2(matrix);
  return Stdlib.abs(d1 - d2 | 0);
}

function parse(param) {
  return param.map(function (param) {
              var param$1 = param.split(" ");
              return param$1.map(Caml_format.caml_int_of_string);
            });
}

function let_(prom, cb) {
  return prom.then(Curry.__1(cb));
}

var Async = {
  let_: let_
};

function go(param) {
  console.log("Ask for first value");
}

console.log("Ask for first value");

exports.$great$great = $great$great;
exports.diag1 = diag1;
exports.diag2 = diag2;
exports.diagonalDifference = diagonalDifference;
exports.parse = parse;
exports.Async = Async;
exports.go = go;
/*  Not a pure module */
