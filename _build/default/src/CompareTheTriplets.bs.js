// Generated by Melange

import * as Caml from "melange/lib/es6/caml.js";
import * as Curry from "melange/lib/es6/curry.js";
import * as Stdlib from "melange/lib/es6/stdlib.js";
import * as Trelude from "./utils/Trelude.bs.js";
import * as Readline from "./utils/Readline.bs.js";
import * as Caml_array from "melange/lib/es6/caml_array.js";
import * as Caml_format from "melange/lib/es6/caml_format.js";

Readline.withAll(function (arr) {
      var parseLine = function (lineNumber) {
        return Trelude.$$Array.map(Caml_format.caml_int_of_string, Trelude.$$String.split(" ", Curry._1(Trelude.$$Option.getExn, Trelude.List.get(lineNumber, arr))));
      };
      var items1 = parseLine(0);
      var items2 = parseLine(1);
      var match = Trelude.$$Array.reduce((function (param, param$1) {
              return [
                      param[0] + param$1[0] | 0,
                      param[1] + param$1[1] | 0
                    ];
            }), [
            0,
            0
          ], Trelude.$$Array.mapi((function (item1, i) {
                  var param = Caml.caml_int_compare(item1, Caml_array.get(items2, i));
                  switch (param) {
                    case -1 :
                        return [
                                0,
                                1
                              ];
                    case 0 :
                        return [
                                0,
                                0
                              ];
                    case 1 :
                        return [
                                1,
                                0
                              ];
                    default:
                      return Stdlib.failwith("This shouldn't be possible!");
                  }
                }), items1));
      var ans1 = String(match[0]);
      var ans2 = String(match[1]);
      console.log(ans1 + (" " + ans2));
    });

export {
  
}
/*  Not a pure module */
